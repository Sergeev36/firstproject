{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/utils/validators/validators.js","components/common/FormsControls/FormsControls.jsx","components/Login/Login.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","formsControl","tag","input","meta","props","hasError","error","touched","className","mod","warning","React","createElement","errorMessage","Textarea","Input","LoginForm","onSubmit","handleSubmit","name","component","validate","placeholder","type","formError","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","loginThunk","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,+BAA+B,aAAe,oCAAoC,UAAY,iCAAiC,KAAO,8B,iCCAlK,oEAAO,IAAMC,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,kKCL5BE,EAAe,SAACC,GAAD,OAAS,YAA4B,IAA1BC,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,KAAQC,EAAW,gCAE/CC,EAAWF,EAAKG,OAASH,EAAKI,QAEpC,OAEI,sBAAKC,UAAWH,EAAWI,IAAIC,QAAU,GAAzC,UACI,oCAAOC,IAAMC,cAAcX,EAApB,2BAA6BC,GAAUE,OAC7CC,GAAY,sBAAMG,UAAWC,IAAII,aAArB,SAAoCV,EAAKG,aAKrDQ,EAAWd,EAAa,YACxBe,EAAQf,EAAa,U,iLCLrBgB,EAAY,SAACZ,GAEtB,OAAO,uBAAMa,SAAUb,EAAMc,aAAtB,UACH,8BAAK,cAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWL,IACxBM,SAAU,CAAC1B,KAAW2B,YAAa,YAC/C,8BAAK,cAAC,IAAD,CAAOH,KAAK,WAAWC,UAAWL,IAAOQ,KAAK,WACvCF,SAAU,CAAC1B,KAAW2B,YAAa,eAC/C,gCAAK,cAAC,IAAD,CAAOH,KAAK,aAAaC,UAAWL,IAAQQ,KAAM,aAAvD,iBACCnB,EAAME,OAAS,qBAAKE,UAAWC,IAAIe,UAApB,SAAgCpB,EAAME,QACtD,8BAAK,iDAKPmB,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,CAEpBV,GAwBYY,uBAPS,SAACC,GACtB,MAAO,CACHC,OAAOD,EAAME,KAAKD,UAKe,CAACE,gBAA1BJ,EArBD,SAACxB,GAMX,OAAIA,EAAM0B,OAAgB,cAAC,IAAD,CAAUG,GAAI,YAEjC,oCAAM,uCACX,cAACR,EAAD,CAAgBR,SAPD,SAACiB,GACd9B,EAAM4B,WAAWE,EAASC,MAAMD,EAASE,SAASF,EAASG","file":"static/js/7.003f3638.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"warning\":\"FormsControls_warning__3zCki\",\"errorMessage\":\"FormsControls_errorMessage__1Qk8O\",\"formError\":\"FormsControls_formError__2dVxI\",\"test\":\"FormsControls_test__1L5SY\"};","\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import React from \"react\";\r\nimport mod from \"./FormsControls.module.css\"\r\n\r\nconst formsControl = (tag) => ({input,meta,...props}) => {\r\n\r\n    const hasError = meta.error && meta.touched;\r\n\r\n    return (\r\n\r\n        <div className={hasError ? mod.warning : \"\"}>\r\n            <div> {React.createElement(tag, {...input, ...props})}</div>\r\n            {hasError && <span className={mod.errorMessage}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = formsControl(\"textarea\")\r\nexport const Input = formsControl(\"input\")","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginThunk} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport mod from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\n\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div><Field name=\"email\" component={Input}\r\n                    validate={[required]} placeholder={\"Email\"} /></div>\r\n        <div><Field name=\"password\" component={Input} type=\"password\"\r\n                    validate={[required]} placeholder={\"Password\"} /></div>\r\n        <div><Field name=\"rememberMe\" component={Input}  type={\"Checkbox\"} />remember me</div>\r\n        {props.error && <div className={mod.formError}>{props.error}</div>}\r\n        <div><button >Login</button></div>\r\n\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.loginThunk(formData.email,formData.password,formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {return <Redirect to={\"profile\"}/>}\r\n\r\n    return <div> <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} />\r\n\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n       isAuth:state.auth.isAuth\r\n   }\r\n}\r\n\r\n\r\nexport default connect (mapStateToProps,{loginThunk}) (Login)"],"sourceRoot":""}