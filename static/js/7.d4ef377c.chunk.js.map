{"version":3,"sources":["components/utils/validators/validators.js","components/common/FormsControls/FormsControls.jsx","components/common/FormsControls/FormsControls.module.css","components/Login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","formsControl","tag","input","meta","props","hasError","error","touched","className","mod","warning","React","createElement","errorMessage","Textarea","Input","module","exports","LoginForm","onSubmit","handleSubmit","name","component","validate","placeholder","type","formError","captcha","src","url","test","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","loginThunk","to","formData","email","password","rememberMe"],"mappings":"wGACA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,kKCL5BE,EAAe,SAACC,GAAD,OAAS,YAA4B,IAA1BC,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,KAAQC,EAAW,gCAE/CC,EAAWF,EAAKG,OAASH,EAAKI,QAEpC,OAEI,sBAAKC,UAAWH,EAAWI,IAAIC,QAAU,GAAzC,UACI,oCAAOC,IAAMC,cAAcX,EAApB,2BAA6BC,GAAUE,OAC7CC,GAAY,sBAAMG,UAAWC,IAAII,aAArB,SAAoCV,EAAKG,aAKrDQ,EAAWd,EAAa,YACxBe,EAAQf,EAAa,U,oBChBlCgB,EAAOC,QAAU,CAAC,QAAU,+BAA+B,aAAe,oCAAoC,UAAY,iCAAiC,KAAO,8B,iLCWrJC,EAAY,SAACd,GAGtB,OAAO,uBAAMe,SAAUf,EAAMgB,aAAtB,UACH,8BAAK,cAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWP,IACxBQ,SAAU,CAAC5B,KAAW6B,YAAa,YAC/C,8BAAK,cAAC,IAAD,CAAOH,KAAK,WAAWC,UAAWP,IAAOU,KAAK,WACvCF,SAAU,CAAC5B,KAAW6B,YAAa,eAC/C,gCAAK,cAAC,IAAD,CAAOH,KAAK,aAAaC,UAAWP,IAAQU,KAAM,aAAvD,iBACCrB,EAAME,OAAS,qBAAKE,UAAWC,IAAIiB,UAApB,SAAgCtB,EAAME,QAErDF,EAAMuB,SAAW,qBAAKC,IAAKxB,EAAMuB,QAAQE,MACzCzB,EAAMuB,SAAW,cAAC,IAAD,CAAON,KAAK,UAAUC,UAAWP,MAEnD,8BAAK,6CACL,sBAAKP,UAAWC,IAAIqB,KAApB,UACI,gLACA,0CAAY,sDACZ,6CAAe,+CAKrBC,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,CAEpBd,GAyBYgB,uBARS,SAACC,GACtB,MAAO,CACHC,OAAOD,EAAME,KAAKD,OAClBT,QAAQQ,EAAME,KAAKV,WAKc,CAACW,gBAA1BJ,EAtBD,SAAC9B,GAMX,OAAIA,EAAMgC,OAAgB,cAAC,IAAD,CAAUG,GAAI,YAEjC,oCAAM,uCACX,cAACR,EAAD,CAAgBZ,SAPD,SAACqB,GACdpC,EAAMkC,WAAWE,EAASC,MAAMD,EAASE,SAASF,EAASG,WAAWH,EAASb,UAM7CA,QAASvB,EAAMuB","file":"static/js/7.d4ef377c.chunk.js","sourcesContent":["\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import React from \"react\";\r\nimport mod from \"./FormsControls.module.css\"\r\n\r\nconst formsControl = (tag) => ({input,meta,...props}) => {\r\n\r\n    const hasError = meta.error && meta.touched;\r\n\r\n    return (\r\n\r\n        <div className={hasError ? mod.warning : \"\"}>\r\n            <div> {React.createElement(tag, {...input, ...props})}</div>\r\n            {hasError && <span className={mod.errorMessage}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = formsControl(\"textarea\")\r\nexport const Input = formsControl(\"input\")","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warning\":\"FormsControls_warning__3zCki\",\"errorMessage\":\"FormsControls_errorMessage__1Qk8O\",\"formError\":\"FormsControls_formError__2dVxI\",\"test\":\"FormsControls_test__1L5SY\"};","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginThunk} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport mod from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\n\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div><Field name=\"email\" component={Input}\r\n                    validate={[required]} placeholder={\"Email\"} /></div>\r\n        <div><Field name=\"password\" component={Input} type=\"password\"\r\n                    validate={[required]} placeholder={\"Password\"} /></div>\r\n        <div><Field name=\"rememberMe\" component={Input}  type={\"Checkbox\"} />remember me</div>\r\n        {props.error && <div className={mod.formError}>{props.error}</div>}\r\n\r\n        {props.captcha && <img src={props.captcha.url}/>}\r\n        {props.captcha && <Field name=\"captcha\" component={Input}  />}\r\n\r\n        <div><button >Login</button></div>\r\n        <div className={mod.test}>\r\n            <div>Данные тестового аккаунта:</div>\r\n            <div>Email: <b>free@samuraijs.com</b></div>\r\n            <div>Password: <b>free</b></div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.loginThunk(formData.email,formData.password,formData.rememberMe,formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {return <Redirect to={\"profile\"}/>}\r\n\r\n    return <div> <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n       isAuth:state.auth.isAuth,\r\n       captcha:state.auth.captcha\r\n   }\r\n}\r\n\r\n\r\nexport default connect (mapStateToProps,{loginThunk}) (Login)"],"sourceRoot":""}